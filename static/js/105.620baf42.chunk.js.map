{"version":3,"file":"static/js/105.620baf42.chunk.js","mappings":"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","sources":["Pages/TasksPage/Main/components/SectionHeader/SectionHeader.js","Pages/TasksPage/Main/components/SectionTasks/SectionTasks.js","Pages/TasksPage/Main/components/SectionTasks/SectionTask/SectionTask.js","Pages/TasksPage/Main/components/Popup/PopupAdd/PopupAdd.js","Pages/TasksPage/Main/components/Popup/PopupEdit/PopupEdit.js","Pages/TasksPage/Main/Main.js"],"sourcesContent":["import { useEffect, useState, useCallback } from 'react';\r\nimport { useTaskContext } from '../../../../../contexts/TasksContext';\r\n\r\nimport './SectionHeader.css';\r\n\r\nimport { IoIosAddCircleOutline } from 'react-icons/io';\r\nimport { FaArrowLeft, FaArrowRight } from 'react-icons/fa';\r\nimport { PopupAdd } from '../index';\r\nconst SectionHeader = ({ count, titleHeader, type }) => {\r\n    const { handleShowCreate, showCreate, date, setDate } = useTaskContext();\r\n    const [days, setDays] = useState(0);\r\n\r\n    const incrementDate = useCallback(() => {\r\n        setDays((prevState) => prevState + 1);\r\n    }, []);\r\n\r\n    const decrementDate = useCallback(() => {\r\n        setDays((prevState) => prevState - 1);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setDate(\r\n            (prevState) => new Date(Date.now() + days * 24 * 60 * 60 * 1000)\r\n        );\r\n    }, [days, setDate]);\r\n\r\n    return (\r\n        <div className='section-header'>\r\n            <h1>{titleHeader}</h1>\r\n            {type === 'daily_tasks' || type === 'completed_daily_tasks' ? (\r\n                <div className='date'>\r\n                    <button onClick={decrementDate}>\r\n                        <FaArrowLeft />\r\n                    </button>\r\n\r\n                    {date.toISOString().substring(0, 10)}\r\n                    <button onClick={incrementDate}>\r\n                        <FaArrowRight />\r\n                    </button>\r\n                </div>\r\n            ) : null}\r\n\r\n            <div className='tools'>\r\n                <div className='selections'>\r\n                    <div className='clear-select'>count tasks: {count}</div>\r\n                </div>\r\n                {type === 'all_tasks' || type === 'daily_tasks' ? (\r\n                    <div>\r\n                        <button onClick={handleShowCreate}>\r\n                            <IoIosAddCircleOutline />\r\n                        </button>\r\n                        {showCreate ? <PopupAdd /> : null}\r\n                    </div>\r\n                ) : null}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SectionHeader;\r\n","import './SectionTasks.css';\r\n\r\nconst SectionTasks = ({ children }) => {\r\n    return <div className='sectoin-tasks'>{children}</div>;\r\n};\r\n\r\nexport default SectionTasks;\r\n","import './SectionTask.css';\r\nimport { useAuth } from '../../../../../../contexts/AuthContext';\r\nimport { useTaskContext } from '../../../../../../contexts/TasksContext';\r\n\r\nimport { MdDelete } from 'react-icons/md';\r\nimport { PiFlagPennantFill } from 'react-icons/pi';\r\nimport { FaCheckSquare } from 'react-icons/fa';\r\nimport { TbArrowBackUp } from 'react-icons/tb';\r\n\r\nconst SectionTask = ({ completed, id, title, description, priority, date }) => {\r\n    const { compleatedTask, deleteTask } = useAuth();\r\n    const { priorityFlagColor, handleShowEdit } = useTaskContext();\r\n\r\n    const handleCompleated = (id, completed) => {\r\n        const confirm = window.confirm(\r\n            !completed\r\n                ? 'Did you complete this task?'\r\n                : 'Do you want to return this task to your uncomplete tasks list?'\r\n        );\r\n        confirm && compleatedTask(id, completed);\r\n    };\r\n\r\n    const handleDelete = (id) => {\r\n        const confirm = window.confirm('Did you Delete this task?');\r\n        confirm && deleteTask(id);\r\n    };\r\n\r\n    return (\r\n        <div className='sectoin-task'>\r\n            {!completed ? (\r\n                <FaCheckSquare\r\n                    className='task-completed'\r\n                    onClick={() => handleCompleated(id, completed)}\r\n                />\r\n            ) : (\r\n                <TbArrowBackUp\r\n                    className='task-completed'\r\n                    onClick={() => handleCompleated(id, completed)}\r\n                />\r\n            )}\r\n\r\n            <div className='wrapper-section-task'>\r\n                <div className='wrapper-task-content'>\r\n                    <div className='task-content'>\r\n                        <h3 className='task-title'>{title}</h3>\r\n                        <h4 className='task-description'>{description}</h4>\r\n                        <h4>{date}</h4>\r\n                    </div>\r\n                    <PiFlagPennantFill\r\n                        style={{\r\n                            color: priorityFlagColor[priority],\r\n                            width: '26px',\r\n                            height: '26px',\r\n                        }}\r\n                    />\r\n                </div>\r\n\r\n                <div className='task-option'>\r\n                    {!completed ? (\r\n                        <button\r\n                            className='btn btn-primary'\r\n                            onClick={() => handleShowEdit(id)}\r\n                        >\r\n                            Edit\r\n                        </button>\r\n                    ) : null}\r\n\r\n                    <button\r\n                        className='task-delete'\r\n                        onClick={() => handleDelete(id)}\r\n                    >\r\n                        <MdDelete />\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SectionTask;\r\n","import { useReducer } from 'react';\r\n\r\nimport './PopupAdd.css';\r\nimport { Modal, Container, Row, Form, Button } from 'react-bootstrap';\r\nimport { PiFlagPennantFill } from 'react-icons/pi';\r\n\r\nimport { useAuth } from '../../../../../../contexts/AuthContext';\r\nimport { useTaskContext } from '../../../../../../contexts/TasksContext';\r\n\r\nconst PopupAdd = () => {\r\n    const { addTask } = useAuth();\r\n    const { showCreate, handleCloseCreate, priorityFlagColor } =\r\n        useTaskContext();\r\n\r\n    // init now date\r\n    var curr = new Date();\r\n    curr.setDate(curr.getDate());\r\n    var dateToDay = curr.toISOString().substring(0, 10);\r\n\r\n    const intiState = {\r\n        title: '',\r\n        description: '',\r\n        priority: 'urgent',\r\n        date: dateToDay,\r\n    };\r\n\r\n    const reducer = (state, action) => {\r\n        switch (action.type) {\r\n            case 'input':\r\n                return {\r\n                    ...state,\r\n                    [action.field]: action.value,\r\n                };\r\n            default:\r\n                return state;\r\n        }\r\n    };\r\n\r\n    const [state, dispatch] = useReducer(reducer, intiState);\r\n\r\n    const handleChange = (e) => {\r\n        dispatch({\r\n            type: 'input',\r\n            field: e.target.name,\r\n            value: e.target.value,\r\n        });\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        await addTask(state);\r\n        handleCloseCreate();\r\n    };\r\n    return (\r\n        <Modal show={showCreate} onHide={handleCloseCreate} size='lg'>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Create Task</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Container>\r\n                    <Form onSubmit={handleSubmit}>\r\n                        <Row>\r\n                            <div className='col-md-8 col-12'>\r\n                                <Form.Group className='mb-3'>\r\n                                    <Form.Label htmlFor='title_of_task'>\r\n                                        Title of task\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type='text'\r\n                                        name='title'\r\n                                        onChange={handleChange}\r\n                                        placeholder='title'\r\n                                        required\r\n                                        autoFocus\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group className='mb-4'>\r\n                                    <Form.Label htmlFor='description_of_task'>\r\n                                        Description of task\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        as='textarea'\r\n                                        name='description'\r\n                                        onChange={(e) => handleChange(e)}\r\n                                        rows={3}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group className='mb-3'>\r\n                                    <Form.Label htmlFor='select_priority'>\r\n                                        Select Priority\r\n                                    </Form.Label>\r\n                                    <div className='select-priority'>\r\n                                        <Form.Select\r\n                                            size='sm'\r\n                                            onChange={handleChange}\r\n                                            name='priority'\r\n                                            required\r\n                                        >\r\n                                            <option value='urgent'>\r\n                                                urgent\r\n                                            </option>\r\n                                            <option value='high'>high</option>\r\n                                            <option value='normal'>\r\n                                                normal\r\n                                            </option>\r\n                                            <option value='low'>low</option>\r\n                                        </Form.Select>\r\n                                        <span>\r\n                                            <PiFlagPennantFill\r\n                                                style={{\r\n                                                    color: priorityFlagColor[\r\n                                                        state.priority\r\n                                                    ],\r\n                                                }}\r\n                                            />\r\n                                        </span>\r\n                                    </div>\r\n                                </Form.Group>\r\n                            </div>\r\n\r\n                            <div className='col-md-4 col-12'>\r\n                                <Form.Group className='select-date mb-3'>\r\n                                    <Form.Label htmlFor='select_date'>\r\n                                        Select Date:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type='date'\r\n                                        name='date'\r\n                                        onChange={handleChange}\r\n                                        required\r\n                                        defaultValue={state.date}\r\n                                    />\r\n                                </Form.Group>\r\n                            </div>\r\n                        </Row>\r\n                        <Modal.Footer>\r\n                            <Button\r\n                                variant='secondary'\r\n                                onClick={handleCloseCreate}\r\n                            >\r\n                                Close\r\n                            </Button>\r\n                            <Button variant='primary' type='submit'>\r\n                                Add\r\n                            </Button>\r\n                        </Modal.Footer>\r\n                    </Form>\r\n                </Container>\r\n            </Modal.Body>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default PopupAdd;\r\n","import './PopupEdit.css';\r\nimport { useEffect, useReducer } from 'react';\r\n\r\nimport { useAuth } from '../../../../../../contexts/AuthContext';\r\nimport { useTaskContext } from '../../../../../../contexts/TasksContext';\r\n\r\nimport { Modal, Container, Row, Form, Button } from 'react-bootstrap';\r\nimport { PiFlagPennantFill } from 'react-icons/pi';\r\n\r\nconst PopupEdit = () => {\r\n    // const [loading, setLoading] = useState(true);\r\n    const { updateTask, getDataTask, loading } = useAuth();\r\n    const { id, showEdit, handleCloseEdit, priorityFlagColor } =\r\n        useTaskContext();\r\n\r\n    const initialState = {\r\n        title: '',\r\n        description: '',\r\n        priority: '',\r\n        date: '',\r\n    };\r\n\r\n    const reducer = (state, action) => {\r\n        switch (action.type) {\r\n            case 'update':\r\n                return {\r\n                    ...state,\r\n                    [action.field]: action.value,\r\n                };\r\n            case 'setForm':\r\n                return {\r\n                    ...state,\r\n                    ...action.payload,\r\n                };\r\n            default:\r\n                return state;\r\n        }\r\n    };\r\n\r\n    const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const res = await getDataTask(id);\r\n                dispatch({ type: 'setForm', payload: res.data() });\r\n                // console.log(res);\r\n            } catch (error) {\r\n                console.error('Error fetching data:', error);\r\n            }\r\n        };\r\n        fetchData();\r\n    }, [id, getDataTask]);\r\n\r\n    const handleChange = (e) => {\r\n        dispatch({\r\n            type: 'update',\r\n            field: e.target.name,\r\n            value: e.target.value,\r\n        });\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        await updateTask(id, state);\r\n        handleCloseEdit(); // Close the modal after updating the task\r\n    };\r\n\r\n    if (loading) {\r\n        return null; // or a spinner/loading indicator\r\n    }\r\n\r\n    return (\r\n        <Modal show={showEdit} onHide={handleCloseEdit} size='lg'>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Edit Task</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Container>\r\n                    <Form onSubmit={handleSubmit}>\r\n                        <Row>\r\n                            <div className='col-md-8 col-12'>\r\n                                <Form.Group className='mb-3'>\r\n                                    <Form.Label htmlFor='title_of_task'>\r\n                                        Title of task\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type='text'\r\n                                        name='title'\r\n                                        placeholder='title'\r\n                                        required\r\n                                        autoFocus\r\n                                        value={state.title}\r\n                                        onChange={handleChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group className='mb-4'>\r\n                                    <Form.Label htmlFor='description_of_task'>\r\n                                        Description of task\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        as='textarea'\r\n                                        name='description'\r\n                                        rows={3}\r\n                                        value={state.description}\r\n                                        onChange={handleChange}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group className='mb-3'>\r\n                                    <Form.Label htmlFor='select_priority'>\r\n                                        Select Priority\r\n                                    </Form.Label>\r\n                                    <div className='select-priority'>\r\n                                        <Form.Select\r\n                                            size='sm'\r\n                                            name='priority'\r\n                                            required\r\n                                            value={state.priority}\r\n                                            onChange={handleChange}\r\n                                        >\r\n                                            <option value='urgent'>\r\n                                                urgent\r\n                                            </option>\r\n                                            <option value='high'>high</option>\r\n                                            <option value='normal'>\r\n                                                normal\r\n                                            </option>\r\n                                            <option value='low'>low</option>\r\n                                        </Form.Select>\r\n                                        <span>\r\n                                            <PiFlagPennantFill\r\n                                                style={{\r\n                                                    color: priorityFlagColor[\r\n                                                        state.priority\r\n                                                    ],\r\n                                                }}\r\n                                            />\r\n                                        </span>\r\n                                    </div>\r\n                                </Form.Group>\r\n                            </div>\r\n                            <div className='col-md-4 col-12'>\r\n                                <Form.Group className='select-date mb-3'>\r\n                                    <Form.Label htmlFor='select_date'>\r\n                                        Select Date:\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type='date'\r\n                                        name='date'\r\n                                        value={state.date}\r\n                                        onChange={handleChange}\r\n                                        required\r\n                                    />\r\n                                </Form.Group>\r\n                            </div>\r\n                        </Row>\r\n                        <Modal.Footer>\r\n                            <Button\r\n                                variant='secondary'\r\n                                onClick={handleCloseEdit}\r\n                            >\r\n                                Close\r\n                            </Button>\r\n                            <Button variant='success' type='submit'>\r\n                                Edit\r\n                            </Button>\r\n                        </Modal.Footer>\r\n                    </Form>\r\n                </Container>\r\n            </Modal.Body>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default PopupEdit;\r\n","import './Main.css';\r\nimport React from 'react';\r\nimport { useEffect, useState, useMemo, useCallback } from 'react';\r\nimport { collection, getDocs, query, where } from 'firebase/firestore';\r\nimport { db } from '../../../firebase';\r\nimport { useAuth } from '../../../contexts/AuthContext';\r\nimport { useTaskContext } from '../../../contexts/TasksContext';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport { SectionHeader, SectionTasks, SectionTask } from './components/index';\r\nimport { PopupEdit } from './components/index';\r\n\r\nconst Main = ({ type, title }) => {\r\n    const { currentUser } = useAuth();\r\n    const { textSearch, showEdit, date, selectPriority, showAside } =\r\n        useTaskContext();\r\n\r\n    console.log('main');\r\n    const [toDoList, setToDoList] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    const styleSpinner = useMemo(\r\n        () => ({\r\n            position: 'absolute',\r\n            top: '50%',\r\n            left: '60%',\r\n        }),\r\n        []\r\n    );\r\n\r\n    const fetchTasks = useCallback(() => {\r\n        setLoading(true);\r\n        setError(null);\r\n        const colRef = collection(db, `users/${currentUser.uid}/tasks`);\r\n        const conditions = [];\r\n\r\n        if (type === 'all_tasks' || type === 'daily_tasks') {\r\n            conditions.push(where('completed', '==', false));\r\n        } else {\r\n            conditions.push(where('completed', '==', true));\r\n        }\r\n\r\n        if (type === 'daily_tasks' || type === 'completed_daily_tasks') {\r\n            conditions.push(\r\n                where('date', '==', date.toISOString().substring(0, 10))\r\n            );\r\n        }\r\n\r\n        if (selectPriority !== 'all') {\r\n            conditions.push(where('priority', '==', selectPriority));\r\n        }\r\n\r\n        const queryRef = query(colRef, ...conditions);\r\n        getDocs(queryRef)\r\n            .then((res) => {\r\n                setToDoList(\r\n                    res.docs.map((doc) => ({\r\n                        ...doc.data(),\r\n                        id: doc.id,\r\n                    }))\r\n                );\r\n            })\r\n            .catch((err) => console.error(err))\r\n            .finally(() => {\r\n                setLoading(false);\r\n            });\r\n    }, [currentUser, type, date, selectPriority]);\r\n\r\n    useEffect(() => {\r\n        fetchTasks();\r\n        setLoading(false);\r\n    }, [fetchTasks, type, showAside]);\r\n\r\n    const filteredToDoList = useMemo(() => {\r\n        // return toDoList.filter((task) =>\r\n        //     task.title.toLowerCase().includes(textSearch.toLowerCase())\r\n        // );\r\n        return toDoList;\r\n    }, [toDoList]);\r\n\r\n    if (loading) {\r\n        return (\r\n            <Spinner\r\n                style={styleSpinner}\r\n                animation='border'\r\n                variant='primary'\r\n            />\r\n        );\r\n    }\r\n\r\n    if (error) {\r\n        return <div className='error-message'>{error}</div>;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <SectionHeader\r\n                count={filteredToDoList.length}\r\n                titleHeader={title}\r\n                type={type}\r\n            />\r\n            \r\n            <SectionTasks>\r\n                {filteredToDoList.map((task) => (\r\n                    <SectionTask\r\n                        key={task.id}\r\n                        id={task.id}\r\n                        completed={task.completed}\r\n                        title={task.title}\r\n                        description={task.description}\r\n                        priority={task.priority}\r\n                        date={task.date}\r\n                    />\r\n                ))}\r\n            </SectionTasks>\r\n            {showEdit && <PopupEdit />}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default React.memo(Main);\r\n"],"names":["_ref","count","titleHeader","type","handleShowCreate","showCreate","date","setDate","useTaskContext","days","setDays","useState","incrementDate","useCallback","prevState","decrementDate","useEffect","Date","now","_jsxs","className","children","_jsx","onClick","FaArrowLeft","toISOString","substring","FaArrowRight","IoIosAddCircleOutline","PopupAdd","completed","id","title","description","priority","compleatedTask","deleteTask","useAuth","priorityFlagColor","handleShowEdit","handleCompleated","window","confirm","TbArrowBackUp","FaCheckSquare","PiFlagPennantFill","style","color","width","height","handleDelete","MdDelete","addTask","handleCloseCreate","curr","getDate","intiState","state","dispatch","useReducer","reducer","action","field","value","handleChange","e","target","name","Modal","show","onHide","size","Header","closeButton","Title","Body","Container","Form","onSubmit","async","preventDefault","Row","Group","Label","htmlFor","Control","onChange","placeholder","required","autoFocus","as","rows","Select","defaultValue","Footer","Button","variant","PopupEdit","updateTask","getDataTask","loading","showEdit","handleCloseEdit","payload","res","data","error","console","fetchData","Main","currentUser","textSearch","selectPriority","showAside","log","toDoList","setToDoList","setLoading","setError","styleSpinner","useMemo","position","top","left","fetchTasks","colRef","collection","db","concat","uid","conditions","push","where","queryRef","query","getDocs","then","docs","map","doc","catch","err","finally","filteredToDoList","Spinner","animation","_Fragment","SectionHeader","length","SectionTasks","task","SectionTask","React"],"sourceRoot":""}